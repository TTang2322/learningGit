You are given the heads of two sorted linked lists list1 and list2.

Merge the two lists in a one sorted list. The list should be made by splicing together the nodes of the first two lists.

Return the head of the merged linked list.


Input: list1 = [1,2,4], list2 = [1,3,4]
Output: [1,1,2,3,4,4]


# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    
    def add2list(self, head, val_list):
        ls = val_list
        cur = head
        while cur:
            ls.append(cur.val)
            cur = cur.next
            
        return ls
    
    def mergeTwoLists(self, list1: Optional[ListNode], list2: Optional[ListNode]) -> Optional[ListNode]:
        
        
        val_list = list()
        
        val_list = self.add2list(list1, val_list)
        val_list = self.add2list(list2, val_list)
        
        val_list.sort()
        
        dummy = cur = ListNode(0)
        
        for val in val_list:
            cur.next = ListNode(val)
            cur = cur.next
            
        return dummy.next
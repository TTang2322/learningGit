# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def __init__(self):
        self.res = list()
        self.No = 0
        
    def inorderTraversal(self, root: Optional[TreeNode]) -> List[int]:
        print('=->'*5)
        self.No += 1
        print(self.No)
        # res = list()
        if root is None:
            print('Null tree')
        else:
            print('root: {}'.format(root.val))
            print('left tree')
            self.inorderTraversal(root.left)
            print('root')
            self.res.append(root.val)
            print('right tree')
            self.inorderTraversal(root.right)
        print(self.res)
        
        return self.res

'''
    def inorderTraversal(self, root: Optional[TreeNode]) -> List[int]:
        stack = []
        current = root
        list1 = []

        while True:
            if current is not None:
                stack.append(current)
                current = current.left

            elif(stack):
                current = stack.pop()
                list1.append(current.val)
                current = current.right

            else:
                break
        return list1
        
'''
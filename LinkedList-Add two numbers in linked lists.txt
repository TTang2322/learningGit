You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.


Input: l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]
Output: [8,9,9,9,0,0,0,1]


# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def addTwoNumbers(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:
        
        dummy = res_linkedList = ListNode(0)
        res_carry = 0
        
        while l1 or l2 or res_carry:
        
            x = l1.val if l1 else 0
            y = l2.val if l2 else 0

            res_digital = (x + y + res_carry) % 10
            res_carry = (x + y + res_carry) // 10
            
            res_linkedList.next = ListNode(res_digital)
            res_linkedList = res_linkedList.next

            if l1: l1 = l1.next
            if l2: l2 = l2.next
            
        dummy = dummy.next
        
        return dummy         